// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parser html: should convert angular.html to match snapshot 1`] = `
"html
  body
    button.btn.btn-small(ng-click=\\"login('testing', 'testing')\\") Test Login
"
`;

exports[`parser html: should convert angular-2.html to match snapshot 1`] = `
"html
  body
    nz-page-header.site-page-header((nzBack)=\\"onBack()\\", nzBackIcon, nzTitle=\\"Title\\", nzSubtitle=\\"This is a subtitle\\")
"
`;

exports[`parser html: should convert apostrophe.html to match snapshot 1`] = `
"html
  body
    img(title=\\"Joe's Place\\")
    img(title='Joe\\"s Place')
"
`;

exports[`parser html: should convert attr-multiline.html to match snapshot 1`] = `
"html
  body
    img(src=\\"img/close_button.png\\", height=\\"16\\", width=\\"16\\", alt=\\"Home\\", onclick=\`
    mwl.switchClass('#search_title', 'show_title_search', 'show_title_main');
    mwl.setGroupTarget('#navigateToggle', '#home', 'show', 'hide');
    mwl.switchClass('#slider', 'show_miniapp', 'show_main');
    mwl.scrollTo('#main');\`)
"
`;

exports[`parser html: should convert bodyless.html to match snapshot 1`] = `
"div Lorem ipsum dolor sit amet.
  input(type=\\"text\\")
"
`;

exports[`parser html: should convert bodyless.json to match snapshot 1`] = `
"| {
| &quot;bodyLess&quot;: true
| }
"
`;

exports[`parser html: should convert bodyless2.html to match snapshot 1`] = `
"head
  meta(charset=\\"UTF-8\\")
  title Title
body
  div Lorem ipsum dolor sit amet.
"
`;

exports[`parser html: should convert bodyless2.json to match snapshot 1`] = `
"| {
| &quot;bodyLess&quot;: true
| }
"
`;

exports[`parser html: should convert classes-at-end.html to match snapshot 1`] = `
"html
  body
    div(v-if=\\"loading\\", @click=\\"doSomething()\\", :key=\\"index\\", v-for=\\"(x, index) in myArray\\").padding-left.padding-top.margin-right.text-center.text-white.background-black
"
`;

exports[`parser html: should convert classes-at-end.json to match snapshot 1`] = `
"html
  body
    | {
    | &quot;classesAtEnd&quot;: true
    | }
"
`;

exports[`parser html: should convert code-inline.html to match snapshot 1`] = `
"html
  body
    code inline
"
`;

exports[`parser html: should convert code-multiline.html to match snapshot 1`] = `
"html
  body
    code
      | blah
      | blah
"
`;

exports[`parser html: should convert comment.html to match snapshot 1`] = `
"html
  head
  body
    //
      tr class=\\"a_b\\">
      <input name=\\"a_b\\" type=\\"checkbox\\" value=\\"true\\"><span id=\\"a_b\\">A B</span></input>
      </tr
"
`;

exports[`parser html: should convert conditional.html to match snapshot 1`] = `
"html
  head
    meta(http-equiv=\\"X-UA-Compatible\\", content=\\"IE=Edge,chrome=1\\")
    meta(http-equiv=\\"content-type\\", content=\\"text/html; charset=us-ascii\\")
  body
    script.
      //<![CDATA[
      //]]>
    | Hello World.
    | blah
    | blah
    | blah
"
`;

exports[`parser html: should convert conditional2.html to match snapshot 1`] = `
"doctype html
// paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/
// [if lt IE 7]> <html class=\\"no-js lt-ie9 lt-ie8 lt-ie7\\" lang=\\"en\\"> <![endif]
// [if IE 7]>    <html class=\\"no-js lt-ie9 lt-ie8\\" lang=\\"en\\"> <![endif]
// [if IE 8]>    <html class=\\"no-js lt-ie9\\" lang=\\"en\\"> <![endif]
// [if gt IE 8]><!
html.no-js(lang=\\"en\\")
  // <![endif]
  head
    meta(charset=\\"utf-8\\")
    // Set the viewport width to device width for mobile
    meta(name=\\"viewport\\", content=\\"width=device-width\\")
    title Welcome to Foundation
    // Included CSS Files
    link(rel=\\"stylesheet\\", href=\\"test/stylesheets/styles.css\\")
    script(src=\\"vendor/assets/javascripts/foundation/modernizr.foundation.js\\")
    // IE Fix for HTML5 Tags
    //
      [if lt IE 9]>
      <script src=\\"http://html5shiv.googlecode.com/svn/trunk/html5.js\\"></script>
      <![endif]
  body
    .row
      .twelve.columns
        h2 Welcome to Foundation
        p This is version 3.0.6 released on July 20, 2012.
        hr
    .row
      .eight.columns
        h3 The Grid
        // Grid Example
        .row
          .twelve.columns
            .panel
              p This is a twelve column section in a row. Each of these includes a div.panel element so you can see where the columns are - it&apos;s not required at all for the grid.
        .row
          .six.columns
            .panel
              p Six columns
          .six.columns
            .panel
              p Six columns
        .row
          .four.columns
            .panel
              p Four columns
          .four.columns
            .panel
              p Four columns
          .four.columns
            .panel
              p Four columns
        h3 Tabs
        dl.tabs
          dd.active
            a(href=\\"#simple1\\") Simple Tab 1
          dd
            a(href=\\"#simple2\\") Simple Tab 2
          dd
            a(href=\\"#simple3\\") Simple Tab 3
        ul.tabs-content
          li#simple1Tab.active This is simple tab 1&apos;s content. Pretty neat, huh?
          li#simple2Tab This is simple tab 2&apos;s content. Now you see it!
          li#simple3Tab This is simple tab 3&apos;s content. It&apos;s, you know...okay.
        h3 Buttons
        .row
          .six.columns
            p
              a.small.button(href=\\"#\\") Small Button
            p
              a.button(href=\\"#\\") Medium Button
            p
              a.large.button(href=\\"#\\") Large Button
          .six.columns
            p
              a.small.alert.button(href=\\"#\\") Small Alert Button
            p
              a.success.button(href=\\"#\\") Medium Success Button
            p
              a.large.secondary.button(href=\\"#\\") Large Secondary Button
      .four.columns
        h4 Getting Started
        p We&apos;re stoked you want to try Foundation! To get going, this file (index.html) includes some basic styles you can modify, play around with, or totally destroy to get going.
        h4 Other Resources
        p Once you&apos;ve exhausted the fun in this document, you should check out:
        ul.disc
          li
            a(href=\\"http://foundation.zurb.com/docs\\") Foundation Documentation
            br
            | Everything you need to know about using the framework.
          li
            a(href=\\"http://github.com/zurb/foundation\\") Foundation on Github
            br
            | Latest code, issue reports, feature requests and more.
          li
            a(href=\\"http://twitter.com/foundationzurb\\") @foundationzurb
            br
            | Ping us on Twitter if you have questions. If you build something with this we&apos;d love to see it (and send you a totally boss sticker).
    // Included JS Files
    script(src=\\"vendor/assets/javascripts/foundation/jquery.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.foundation.reveal.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.foundation.orbit.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.foundation.forms.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.placeholder.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.foundation.tooltips.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.foundation.alerts.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.foundation.buttons.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.foundation.accordion.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.foundation.navigation.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.foundation.mediaQueryToggle.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/jquery.foundation.tabs.js\\")
    script(src=\\"vendor/assets/javascripts/foundation/app.js\\")
"
`;

exports[`parser html: should convert conditional3.html to match snapshot 1`] = `
"doctype html
// [if lt IE 7]>      <html class=\\"no-js lt-ie9 lt-ie8 lt-ie7\\"> <![endif]
// [if IE 7]>         <html class=\\"no-js lt-ie9 lt-ie8\\"> <![endif]
// [if IE 8]>         <html class=\\"no-js lt-ie9\\"> <![endif]
// [if gt IE 8]><!
html.no-js
  // <![endif]
  head
    meta(charset=\\"utf-8\\")
    meta(http-equiv=\\"X-UA-Compatible\\", content=\\"IE=edge,chrome=1\\")
    title
    meta(name=\\"description\\", content=\\"\\")
    meta(name=\\"viewport\\", content=\\"width=device-width\\")
    link(rel=\\"stylesheet\\", href=\\"css/bootstrap.min.css\\")
    style.
      body {
      padding-top: 50px;
      padding-bottom: 20px;
      }
    link(rel=\\"stylesheet\\", href=\\"css/bootstrap-theme.min.css\\")
    link(rel=\\"stylesheet\\", href=\\"css/main.css\\")
    script(src=\\"js/vendor/modernizr-2.6.2-respond-1.1.0.min.js\\")
  body
    //
      [if lt IE 7]>
      <p class=\\"chromeframe\\">You are using an <strong>outdated</strong> browser. Please <a href=\\"http://browsehappy.com/\\">upgrade your browser</a> or <a href=\\"http://www.google.com/chromeframe/?redirect=true\\">activate Google Chrome Frame</a> to improve your experience.</p>
      <![endif]
    .navbar.navbar-inverse.navbar-fixed-top
"
`;

exports[`parser html: should convert default-html.html to match snapshot 1`] = `
"doctype html
html(lang=\\"en\\")
  head
    title Pug
    script(type=\\"text/javascript\\").
      foo = true;
      bar = function () {};
      if (foo) {
      bar(1 + 5)
      }
  body
    h1 Pug - node template engine
    #container.col(data-element=\\"1\\", data-element-1=\\"2\\")
      p You are amazing
      p
        | Pug is a terse and simple
        | templating language with a
        | strong focus on performance
        | and powerful features.
"
`;

exports[`parser html: should convert empty-class.html to match snapshot 1`] = `
"html
  head
  body(class=\\"\\")
    code
      | blah
      | blah
"
`;

exports[`parser html: should convert entity.html to match snapshot 1`] = `
"html
  body
    p Note the lack of the 
      code &lt;meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\"&gt;
      | , which disables the zooming aspect of sites in mobile devices. In addition, we reset our container's width and are basically good to go.
    p &copy; Company 2013
"
`;

exports[`parser html: should convert entity.json to match snapshot 1`] = `
"html
  body
    | {
    | \\"encode\\": false
    | }
"
`;

exports[`parser html: should convert headless.html to match snapshot 1`] = `
"html
  head
    script(type=\\"text/javascript\\").
      window.location = \\"/newsite/\\";
"
`;

exports[`parser html: should convert html5boilerplate.html to match snapshot 1`] = `
"doctype html
// [if lt IE 7]> <html class=\\"no-js ie6 oldie\\" lang=\\"en\\"> <![endif]
// [if IE 7]>    <html class=\\"no-js ie7 oldie\\" lang=\\"en\\"> <![endif]
// [if IE 8]>    <html class=\\"no-js ie8 oldie\\" lang=\\"en\\"> <![endif]
// [if gt IE 8]><!
html.no-js(lang=\\"en\\")
  // <![endif]
  head
    meta(charset=\\"utf-8\\")
    meta(http-equiv=\\"X-UA-Compatible\\", content=\\"IE=edge,chrome=1\\")
    title
    meta(name=\\"description\\", content=\\"\\")
    meta(name=\\"author\\", content=\\"\\")
    meta(name=\\"viewport\\", content=\\"width=device-width,initial-scale=1\\")
    link(rel=\\"stylesheet\\", href=\\"css/style.css\\")
    script(src=\\"js/libs/modernizr-2.0.6.min.js\\")
  body
    #container
      header
      #main(role=\\"main\\")
      footer
    // ! end of #container
    script(src=\\"//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js\\")
    script.
      window.jQuery || document.write('<script src=\\"js/libs/jquery-1.6.2.min.js\\"><\\\\/script>')
    // scripts concatenated and minified via ant build script
    script(src=\\"js/plugins.js\\")
    script(src=\\"js/script.js\\")
    // end scripts
    script.
      var _gaq=[['_setAccount','UA-XXXXX-X'],['_trackPageview']]; // Change UA-XXXXX-X to be your site's ID
      (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];g.async=1;
      g.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';
      s.parentNode.insertBefore(g,s)}(document,'script'));
    //
      [if lt IE 7 ]>
      <script src=\\"//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.2/CFInstall.min.js\\"></script>
      <script>window.attachEvent(\\"onload\\",function(){CFInstall.check({mode:\\"overlay\\"})})</script>
      <![endif]
"
`;

exports[`parser html: should convert keep-empty-quote.html to match snapshot 1`] = `
"html
  body
    div
      a(href=\\"\\") empty link
      input(type=\\"checkbox\\", checked)
      | checked box
"
`;

exports[`parser html: should convert leading_equal.html to match snapshot 1`] = `
"html
  body
    div =1+1
"
`;

exports[`parser html: should convert mustache.html to match snapshot 1`] = `
"html
  body
    #mustacheTestcases
      #div1(class=\\"panel-body {{listTypeClass}}\\") Test
      div(class=\\"note checklist-part indent-{{indent}}\\")
      textarea.note-text(id=\\"{{id}}\\") {{text}}
"
`;

exports[`parser html: should convert only-body.html to match snapshot 1`] = `
"html
  body
    div Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur, facere?
"
`;

exports[`parser html: should convert only-head.html to match snapshot 1`] = `
"html
  head
    script(type=\\"text/javascript\\").
      window.location = \\"/newsite/\\";
"
`;

exports[`parser html: should convert parse-style.html to match snapshot 1`] = `
"html
  head
    style.
      .body {
      background: red;
      }
    style
"
`;

exports[`parser html: should convert pfft.html to match snapshot 1`] = `
"html
  body
    p ffft
"
`;

exports[`parser html: should convert pre1.html to match snapshot 1`] = `
"doctype html
html
  head
    meta(http-equiv=\\"content-type\\", content=\\"text/html; charset=ISO-8859-1\\")
    title html2jade.js
    link(rel=\\"stylesheet\\", type=\\"text/css\\", href=\\"highlight.css\\")
  body.hl
    pre.hl
      span.hl.slc // Generated by CoffeeScript 1.3.3
      span.hl.opt (
      span.hl.kwa function
      span.hl.opt () {
      span.hl.kwa var
      | Converter
      span.hl.opt ,
      | Output
      span.hl.opt ,
      | Parser
      span.hl.opt ,
      | StreamOutput
      span.hl.opt ,
      | StringOutput
      span.hl.opt ,
      | Writer
      span.hl.opt ,
      | publicIdDocTypeNames
      span.hl.opt ,
      | scope
      span.hl.opt ,
      | systemIdDocTypeNames
      span.hl.opt ,
      | _ref
      span.hl.opt ,
      | __hasProp
      span.hl.opt = {}.
      | hasOwnProperty
      span.hl.opt ,
      | __extends
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | child
      span.hl.opt ,
      | parent
      span.hl.opt ) {
      span.hl.kwa for
      span.hl.opt (
      span.hl.kwa var
      | key
      span.hl.kwa in
      | parent
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | __hasProp
      span.hl.opt .
      span.hl.kwd call
      span.hl.opt (
      | parent
      span.hl.opt ,
      | key
      span.hl.opt ))
      | child
      span.hl.kwc [key]
      span.hl.opt =
      | parent
      span.hl.kwc [key]
      span.hl.opt ; }
      span.hl.kwa function
      span.hl.kwd ctor
      span.hl.opt () {
      span.hl.kwa this
      span.hl.opt .
      | constructor
      span.hl.opt =
      | child
      span.hl.opt ; }
      | ctor
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt =
      | parent
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt ;
      | child
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt =
      span.hl.kwa new
      span.hl.kwd ctor
      span.hl.opt ();
      | child
      span.hl.opt .
      | __super__
      span.hl.opt =
      | parent
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt ;
      span.hl.kwa return
      | child
      span.hl.opt ; };
      | scope
      span.hl.opt =
      span.hl.kwa typeof
      | exports
      span.hl.opt !==
      span.hl.str &amp;quot;undefined&amp;quot;
      span.hl.opt &amp;amp;&amp;amp;
      | exports
      span.hl.opt !==
      span.hl.kwa null
      | ? exports
      span.hl.opt : (
      | _ref
      span.hl.opt =
      span.hl.kwa this
      span.hl.opt .
      | Html2Jade
      span.hl.opt ) !=
      span.hl.kwa null
      | ? _ref
      span.hl.opt :
      span.hl.kwa this
      span.hl.opt .
      | Html2Jade
      span.hl.opt = {};
      | Parser
      span.hl.opt = (
      span.hl.kwa function
      span.hl.opt () {
      span.hl.kwa function
      span.hl.kwd Parser
      span.hl.opt (
      | options
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | options
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | options
      span.hl.opt = {};
      span.hl.opt }
      span.hl.kwa this
      span.hl.opt .
      | jsdom
      span.hl.opt =
      span.hl.kwd require
      span.hl.opt (
      span.hl.str &apos;jsdom&apos;
      span.hl.opt );
      span.hl.opt }
      | Parser
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | parse
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | arg
      span.hl.opt ,
      | cb
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (!
      | arg
      span.hl.opt ) {
      span.hl.kwa return
      span.hl.kwd cb
      span.hl.opt (
      span.hl.str &apos;null file&apos;
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      span.hl.kwa return this
      span.hl.opt .
      | jsdom
      span.hl.opt .
      span.hl.kwd env
      span.hl.opt (
      | arg
      span.hl.opt ,
      | cb
      span.hl.opt );
      span.hl.opt }
      span.hl.opt };
      span.hl.kwa return
      | Parser
      span.hl.opt ;
      span.hl.opt })();
      | Writer
      span.hl.opt = (
      span.hl.kwa function
      span.hl.opt () {
      span.hl.kwa function
      span.hl.kwd Writer
      span.hl.opt (
      | options
      span.hl.opt ) {
      span.hl.kwa var
      | _ref1
      span.hl.opt ,
      | _ref2
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | options
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | options
      span.hl.opt = {};
      span.hl.opt }
      span.hl.kwa this
      span.hl.opt .
      | wrapLength
      span.hl.opt = (
      | _ref1
      span.hl.opt =
      | options
      span.hl.opt .
      | wrapLength
      span.hl.opt ) !=
      span.hl.kwa null
      | ? _ref1
      span.hl.opt :
      span.hl.num 80
      span.hl.opt ;
      span.hl.kwa this
      span.hl.opt .
      | scalate
      span.hl.opt = (
      | _ref2
      span.hl.opt =
      | options
      span.hl.opt .
      | scalate
      span.hl.opt ) !=
      span.hl.kwa null
      | ? _ref2
      span.hl.opt :
      span.hl.kwa false
      span.hl.opt ;
      span.hl.kwa this
      span.hl.opt .
      | attrSep
      span.hl.opt =
      span.hl.kwa this
      span.hl.opt .
      | scalate ?
      span.hl.str &apos; &apos;
      span.hl.opt :
      span.hl.str &apos;, &apos;
      span.hl.opt ;
      span.hl.opt }
      | Writer
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | tagHead
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | node
      span.hl.opt ) {
      span.hl.kwa var
      | classes
      span.hl.opt ,
      | result
      span.hl.opt ;
      | result
      span.hl.opt =
      | node
      span.hl.opt .
      | tagName
      span.hl.opt !==
      span.hl.str &apos;DIV&apos;
      | ? node
      span.hl.opt .
      | tagName
      span.hl.opt .
      span.hl.kwd toLowerCase
      span.hl.opt () :
      span.hl.str &apos;&apos;
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | node
      span.hl.opt .
      | id
      span.hl.opt ) {
      | result
      span.hl.opt +=
      span.hl.str &apos;#&apos;
      span.hl.opt +
      | node
      span.hl.opt .
      | id
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | node
      span.hl.opt .
      span.hl.kwd hasAttribute
      span.hl.opt (
      span.hl.str &apos;class&apos;
      span.hl.opt ) &amp;amp;&amp;amp;
      | node
      span.hl.opt .
      span.hl.kwd getAttribute
      span.hl.opt (
      span.hl.str &apos;class&apos;
      span.hl.opt ).
      | length
      span.hl.opt &amp;gt;
      span.hl.num 0
      span.hl.opt ) {
      | classes
      span.hl.opt =
      | node
      span.hl.opt .
      span.hl.kwd getAttribute
      span.hl.opt (
      span.hl.str &apos;class&apos;
      span.hl.opt ).
      span.hl.kwd split
      span.hl.opt (/
      | \\\\s
      span.hl.opt +/).
      span.hl.kwd filter
      span.hl.opt (
      span.hl.kwa function
      span.hl.opt (
      | item
      span.hl.opt ) {
      span.hl.kwa return
      span.hl.opt (
      | item
      span.hl.opt !=
      span.hl.kwa null
      span.hl.opt ) &amp;amp;&amp;amp;
      | item
      span.hl.opt .
      span.hl.kwd trim
      span.hl.opt ().
      | length
      span.hl.opt &amp;gt;
      span.hl.num 0
      span.hl.opt ;
      span.hl.opt });
      | result
      span.hl.opt +=
      span.hl.str &apos;.&apos;
      span.hl.opt +
      | classes
      span.hl.opt .
      span.hl.kwd join
      span.hl.opt (
      span.hl.str &apos;.&apos;
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | result
      span.hl.opt .
      | length
      span.hl.opt ===
      span.hl.num 0
      span.hl.opt ) {
      | result
      span.hl.opt =
      span.hl.str &apos;div&apos;
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa return
      | result
      span.hl.opt ;
      span.hl.opt };
      | Writer
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | tagAttr
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | node
      span.hl.opt ) {
      span.hl.kwa var
      | attr
      span.hl.opt ,
      | attrs
      span.hl.opt ,
      | nodeName
      span.hl.opt ,
      | result
      span.hl.opt ,
      | _i
      span.hl.opt ,
      | _len
      span.hl.opt ;
      | attrs
      span.hl.opt =
      | node
      span.hl.opt .
      | attributes
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (!
      | attrs || attrs
      span.hl.opt .
      | length
      span.hl.opt ===
      span.hl.num 0
      span.hl.opt ) {
      span.hl.kwa return
      span.hl.str &apos;&apos;
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      | result
      span.hl.opt = [];
      span.hl.kwa for
      span.hl.opt (
      | _i
      span.hl.opt =
      span.hl.num 0
      span.hl.opt ,
      | _len
      span.hl.opt =
      | attrs
      span.hl.opt .
      | length
      span.hl.opt ;
      | _i
      span.hl.opt &amp;lt;
      | _len
      span.hl.opt ;
      | _i
      span.hl.opt ++) {
      | attr
      span.hl.opt =
      | attrs
      span.hl.kwc [_i]
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | attr
      span.hl.opt &amp;amp;&amp;amp; (
      | nodeName
      span.hl.opt =
      | attr
      span.hl.opt .
      | nodeName
      span.hl.opt )) {
      span.hl.kwa if
      span.hl.opt (
      | nodeName
      span.hl.opt !==
      span.hl.str &apos;id&apos;
      span.hl.opt &amp;amp;&amp;amp;
      | nodeName
      span.hl.opt !==
      span.hl.str &apos;class&apos;
      span.hl.opt &amp;amp;&amp;amp;
      span.hl.kwa typeof
      span.hl.opt (
      | attr
      span.hl.opt .
      | nodeValue
      span.hl.opt !=
      span.hl.kwa null
      span.hl.opt )) {
      | result
      span.hl.opt .
      span.hl.kwd push
      span.hl.opt (
      | attr
      span.hl.opt .
      | nodeName
      span.hl.opt +
      span.hl.str &apos;=
      span.hl.esc \\\\&apos;
      span.hl.str &apos;
      span.hl.opt +
      | attr
      span.hl.opt .
      | nodeValue
      span.hl.opt .
      span.hl.kwd replace
      span.hl.opt (/
      span.hl.str &apos;/g, &apos;
      span.hl.esc \\\\\\\\\\\\&apos;
      span.hl.str &apos;) + &apos;
      span.hl.esc \\\\&apos;
      span.hl.str &apos;);
      span.hl.str             }
      span.hl.str           }
      span.hl.str         }
      span.hl.str         if (result.length &amp;gt; 0) {
      span.hl.str           return &apos;
      span.hl.opt (
      span.hl.str &apos; + result.join(this.attrSep) + &apos;
      span.hl.opt )
      span.hl.str &apos;;
      span.hl.str         } else {
      span.hl.str           return &apos;
      span.hl.str &apos;;
      span.hl.str         }
      span.hl.str       }
      span.hl.str     };
      span.hl.str
      span.hl.str     Writer.prototype.tagText = function(node) {
      span.hl.str       var data, _ref1;
      span.hl.str       if (((_ref1 = node.firstChild) != null ? _ref1.nodeType : void 0) !== 3) {
      span.hl.str         return null;
      span.hl.str       } else if (node.firstChild !== node.lastChild) {
      span.hl.str         return null;
      span.hl.str       } else {
      span.hl.str         data = node.firstChild.data;
      span.hl.str         if (data.length &amp;gt; this.wrapLength || data.match(/
      span.hl.esc \\\\r
      span.hl.str |
      span.hl.esc \\\\n
      span.hl.str /)) {
      span.hl.str           return null;
      span.hl.str         } else {
      span.hl.str           return data;
      span.hl.str         }
      span.hl.str       }
      span.hl.str     };
      span.hl.str
      span.hl.str     Writer.prototype.forEachChild = function(parent, cb) {
      span.hl.str       var child, _results;
      span.hl.str       if (parent) {
      span.hl.str         child = parent.firstChild;
      span.hl.str         _results = [];
      span.hl.str         while (child) {
      span.hl.str           cb(child);
      span.hl.str           _results.push(child = child.nextSibling);
      span.hl.str         }
      span.hl.str         return _results;
      span.hl.str       }
      span.hl.str     };
      span.hl.str
      span.hl.str     Writer.prototype.writeTextContent = function(node, output, pipe, trim, wrap, escapeBackslash) {
      span.hl.str       var _this = this;
      span.hl.str       if (pipe == null) {
      span.hl.str         pipe = true;
      span.hl.str       }
      span.hl.str       if (trim == null) {
      span.hl.str         trim = true;
      span.hl.str       }
      span.hl.str       if (wrap == null) {
      span.hl.str         wrap = true;
      span.hl.str       }
      span.hl.str       if (escapeBackslash == null) {
      span.hl.str         escapeBackslash = false;
      span.hl.str       }
      span.hl.str       output.enter();
      span.hl.str       this.forEachChild(node, function(child) {
      span.hl.str         return _this.writeText(child, output, pipe, trim, wrap, escapeBackslash);
      span.hl.str       });
      span.hl.str       return output.leave();
      span.hl.str     };
      span.hl.str
      span.hl.str     Writer.prototype.writeText = function(node, output, pipe, trim, wrap, escapeBackslash) {
      span.hl.str       var data, lines,
      span.hl.str         _this = this;
      span.hl.str       if (pipe == null) {
      span.hl.str         pipe = true;
      span.hl.str       }
      span.hl.str       if (trim == null) {
      span.hl.str         trim = true;
      span.hl.str       }
      span.hl.str       if (wrap == null) {
      span.hl.str         wrap = true;
      span.hl.str       }
      span.hl.str       if (escapeBackslash == null) {
      span.hl.str         escapeBackslash = false;
      span.hl.str       }
      span.hl.str       if (node.nodeType === 3) {
      span.hl.str         data = node.data || &apos;
      span.hl.str &apos;;
      span.hl.str         if (data.length &amp;gt; 0) {
      span.hl.str           lines = data.split(/
      span.hl.esc \\\\r
      span.hl.str |
      span.hl.esc \\\\n
      span.hl.str /);
      span.hl.str           return lines.forEach(function(line) {
      span.hl.str             return _this.writeTextLine(line, output, pipe, trim, wrap, escapeBackslash);
      span.hl.str           });
      span.hl.str         }
      span.hl.str       }
      span.hl.str     };
      span.hl.str
      span.hl.str     Writer.prototype.writeTextLine = function(line, output, pipe, trim, wrap, escapeBackslash) {
      span.hl.str       var lines, prefix,
      span.hl.str         _this = this;
      span.hl.str       if (pipe == null) {
      span.hl.str         pipe = true;
      span.hl.str       }
      span.hl.str       if (trim == null) {
      span.hl.str         trim = true;
      span.hl.str       }
      span.hl.str       if (wrap == null) {
      span.hl.str         wrap = true;
      span.hl.str       }
      span.hl.str       if (escapeBackslash == null) {
      span.hl.str         escapeBackslash = false;
      span.hl.str       }
      span.hl.str       prefix = pipe ? &apos;
      | |
      span.hl.str &apos; : &apos;
      span.hl.str &apos;;
      span.hl.str       if (trim) {
      span.hl.str         line = line ? line.trim() : &apos;
      span.hl.str &apos;;
      span.hl.str       }
      span.hl.str       if (line &amp;amp;&amp;amp; line.length &amp;gt; 0) {
      span.hl.str         if (escapeBackslash) {
      span.hl.str           line = line.replace(&amp;quot;
      span.hl.esc \\\\\\\\
      span.hl.str &amp;quot;, &amp;quot;
      span.hl.esc \\\\\\\\\\\\\\\\
      span.hl.str &amp;quot;);
      span.hl.str         }
      span.hl.str         if (!wrap || line.length &amp;lt;= this.wrapLength) {
      span.hl.str           return output.writeln(prefix + line);
      span.hl.str         } else {
      span.hl.str           lines = this.breakLine(line);
      span.hl.str           if (lines.length === 1) {
      span.hl.str             return output.writeln(prefix + line);
      span.hl.str           } else {
      span.hl.str             return lines.forEach(function(line) {
      span.hl.str               return _this.writeTextLine(line, output, pipe, trim, wrap);
      span.hl.str             });
      span.hl.str           }
      span.hl.str         }
      span.hl.str       }
      span.hl.str     };
      span.hl.str
      span.hl.str     Writer.prototype.breakLine = function(line) {
      span.hl.str       var lines, word, words;
      span.hl.str       if (!line || line.length === 0) {
      span.hl.str         return [];
      span.hl.str       }
      span.hl.str       if (line.search(/\\\\s+/ === -1)) {
      span.hl.str         return [line];
      span.hl.str       }
      span.hl.str       lines = [];
      span.hl.str       words = line.split(/\\\\s+/);
      span.hl.str       line = &apos;
      span.hl.str &apos;;
      span.hl.str       while (words.length) {
      span.hl.str         word = words.shift();
      span.hl.str         if (line.length + word.length &amp;gt; this.wrapLength) {
      span.hl.str           lines.push(line);
      span.hl.str           line = word;
      span.hl.str         } else if (line.length) {
      span.hl.str           line += &apos;
      span.hl.str &apos; + word;
      span.hl.str         } else {
      span.hl.str           line = word;
      span.hl.str         }
      span.hl.str       }
      span.hl.str       if (line.length) {
      span.hl.str         lines.push(line);
      span.hl.str       }
      span.hl.str       return lines;
      span.hl.str     };
      span.hl.str
      span.hl.str     return Writer;
      span.hl.str
      span.hl.str   })();
      span.hl.str
      span.hl.str   publicIdDocTypeNames = {
      span.hl.str     &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;: &amp;quot;transitional&amp;quot;,
      span.hl.str     &amp;quot;-//W3C//DTD XHTML 1.0 Strict//EN&amp;quot;: &amp;quot;strict&amp;quot;,
      span.hl.str     &amp;quot;-//W3C//DTD XHTML 1.0 Frameset//EN&amp;quot;: &amp;quot;frameset&amp;quot;,
      span.hl.str     &amp;quot;-//W3C//DTD XHTML 1.1//EN&amp;quot;: &amp;quot;1.1&amp;quot;,
      span.hl.str     &amp;quot;-//W3C//DTD XHTML Basic 1.1//EN&amp;quot;: &amp;quot;basic&amp;quot;,
      span.hl.str     &amp;quot;-//WAPFORUM//DTD XHTML Mobile 1.2//EN&amp;quot;: &amp;quot;mobile&amp;quot;
      span.hl.str   };
      span.hl.str
      span.hl.str   systemIdDocTypeNames = {
      span.hl.str     &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;: &amp;quot;transitional&amp;quot;,
      span.hl.str     &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;quot;: &amp;quot;strict&amp;quot;,
      span.hl.str     &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&amp;quot;: &amp;quot;frameset&amp;quot;,
      span.hl.str     &amp;quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&amp;quot;: &amp;quot;1.1&amp;quot;,
      span.hl.str     &amp;quot;http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd&amp;quot;: &amp;quot;basic&amp;quot;,
      span.hl.str     &amp;quot;http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd&amp;quot;: &amp;quot;mobile&amp;quot;
      span.hl.str   };
      span.hl.str
      span.hl.str   Converter = (function() {
      span.hl.str
      span.hl.str     function Converter(options) {
      span.hl.str       var _ref1, _ref2;
      span.hl.str       if (options == null) {
      span.hl.str         options = {};
      span.hl.str       }
      span.hl.str       this.scalate = (_ref1 = options.scalate) != null ? _ref1 : false;
      span.hl.str       this.writer = (_ref2 = options.writer) != null ? _ref2 : new Writer(options);
      span.hl.str     }
      span.hl.str
      span.hl.str     Converter.prototype.document = function(document, output) {
      span.hl.str       var docTypeName, doctype, htmlEls, publicId, systemId;
      span.hl.str       if (document.doctype != null) {
      span.hl.str         doctype = document.doctype;
      span.hl.str         docTypeName = void 0;
      span.hl.str         publicId = doctype.publicId;
      span.hl.str         systemId = doctype.systemId;
      span.hl.str         if ((publicId != null) &amp;amp;&amp;amp; (publicIdDocTypeNames[publicId] != null)) {
      span.hl.str           docTypeName = publicIdDocTypeNames[publicId];
      span.hl.str         } else if ((systemId != null) &amp;amp;&amp;amp; (systemIdDocTypeNames[systemId] != null)) {
      span.hl.str           docTypeName = systemIdDocTypeNames[systemId] != null;
      span.hl.str         } else if ((doctype.name != null) &amp;amp;&amp;amp; doctype.name.toLowerCase() === &apos;
      | html
      span.hl.str &apos;) {
      span.hl.str           docTypeName = &apos;
      span.hl.num 5
      span.hl.str &apos;;
      span.hl.str         }
      span.hl.str         if (docTypeName != null) {
      span.hl.str           output.writeln(&apos;
      span.hl.opt !!!
      span.hl.str &apos; + docTypeName);
      span.hl.str         }
      span.hl.str       }
      span.hl.str       if (document.documentElement) {
      span.hl.str         return this.children(document, output, false);
      span.hl.str       } else {
      span.hl.str         htmlEls = document.getElementsByTagName(&apos;
      | html
      span.hl.str &apos;);
      span.hl.str         if (htmlEls.length &amp;gt; 0) {
      span.hl.str           return this.element(htmlEls[0], output);
      span.hl.str         }
      span.hl.str       }
      span.hl.str     };
      span.hl.str
      span.hl.str     Converter.prototype.element = function(node, output) {
      span.hl.str       var firstline, tagAttr, tagHead, tagName, tagText,
      span.hl.str         _this = this;
      span.hl.str       if (!(node != null ? node.tagName : void 0)) {
      span.hl.str         return;
      span.hl.str       }
      span.hl.str       tagName = node.tagName.toLowerCase();
      span.hl.str       tagHead = this.writer.tagHead(node);
      span.hl.str       tagAttr = this.writer.tagAttr(node);
      span.hl.str       tagText = this.writer.tagText(node);
      span.hl.str       if (tagName === &apos;
      | script
      span.hl.str &apos; || tagName === &apos;
      | style
      span.hl.str &apos;) {
      span.hl.str         if (node.hasAttribute(&apos;
      | src
      span.hl.str &apos;)) {
      span.hl.str           output.writeln(tagHead + tagAttr);
      span.hl.str           return this.writer.writeTextContent(node, output, false, false, false);
      span.hl.str         } else if (tagName === &apos;
      | script
      span.hl.str &apos;) {
      span.hl.str           return this.script(node, output, tagHead, tagAttr);
      span.hl.str         } else if (tagName === &apos;
      | style
      span.hl.str &apos;) {
      span.hl.str           return this.style(node, output, tagHead, tagAttr);
      span.hl.str         }
      span.hl.str       } else if (tagName === &apos;
      | conditional
      span.hl.str &apos;) {
      span.hl.str         output.writeln(&apos;
      span.hl.slc //&apos; + node.getAttribute(&apos;condition&apos;));
      span.hl.kwa return this
      span.hl.opt .
      span.hl.kwd children
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else if
      span.hl.opt ([
      span.hl.str &apos;pre&apos;
      span.hl.opt ].
      span.hl.kwd indexOf
      span.hl.opt (
      | tagName
      span.hl.opt ) !== -
      span.hl.num 1
      span.hl.opt ) {
      | output
      span.hl.opt .
      span.hl.kwd writeln
      span.hl.opt (
      | tagHead
      span.hl.opt +
      | tagAttr
      span.hl.opt +
      span.hl.str &apos;.&apos;
      span.hl.opt );
      | output
      span.hl.opt .
      span.hl.kwd enter
      span.hl.opt ();
      | firstline
      span.hl.opt =
      span.hl.kwa true
      span.hl.opt ;
      span.hl.kwa this
      span.hl.opt .
      | writer
      span.hl.opt .
      span.hl.kwd forEachChild
      span.hl.opt (
      | node
      span.hl.opt ,
      span.hl.kwa function
      span.hl.opt (
      | child
      span.hl.opt ) {
      span.hl.kwa var
      | data
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | child
      span.hl.opt .
      | nodeType
      span.hl.opt ===
      span.hl.num 3
      span.hl.opt ) {
      | data
      span.hl.opt =
      | child
      span.hl.opt .
      | data
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt ((
      | data
      span.hl.opt !=
      span.hl.kwa null
      span.hl.opt ) &amp;amp;&amp;amp;
      | data
      span.hl.opt .
      | length
      span.hl.opt &amp;gt;
      span.hl.num 0
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | firstline
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | data
      span.hl.opt .
      span.hl.kwd search
      span.hl.opt (/
      span.hl.esc \\\\r\\\\n
      | |
      span.hl.esc \\\\r
      | |
      span.hl.esc \\\\n
      span.hl.opt /) ===
      span.hl.num 0
      span.hl.opt ) {
      | data
      span.hl.opt =
      | data
      span.hl.opt .
      span.hl.kwd replace
      span.hl.opt (/
      span.hl.esc \\\\r\\\\n
      | |
      span.hl.esc \\\\r
      | |
      span.hl.esc \\\\n
      span.hl.opt /,
      span.hl.str &apos;&apos;
      span.hl.opt );
      span.hl.opt }
      | data
      span.hl.opt =
      span.hl.str &apos;
      span.hl.esc \\\\\\\\
      span.hl.str n&apos;
      span.hl.opt +
      | data
      span.hl.opt ;
      | firstline
      span.hl.opt =
      span.hl.kwa false
      span.hl.opt ;
      span.hl.opt }
      | data
      span.hl.opt =
      | data
      span.hl.opt .
      span.hl.kwd replace
      span.hl.opt (/
      span.hl.esc \\\\t
      span.hl.opt /
      | g
      span.hl.opt ,
      span.hl.str &apos;
      span.hl.esc \\\\\\\\
      span.hl.str t&apos;
      span.hl.opt );
      | data
      span.hl.opt =
      | data
      span.hl.opt .
      span.hl.kwd replace
      span.hl.opt (/
      span.hl.esc \\\\r\\\\n
      | |
      span.hl.esc \\\\r
      | |
      span.hl.esc \\\\n
      span.hl.opt /
      | g
      span.hl.opt ,
      span.hl.str &apos;
      span.hl.esc \\\\n
      span.hl.str &apos;
      span.hl.opt +
      | output
      span.hl.opt .
      | indents
      span.hl.opt );
      span.hl.kwa return
      | output
      span.hl.opt .
      span.hl.kwd write
      span.hl.opt (
      | data
      span.hl.opt );
      span.hl.opt }
      span.hl.opt }
      span.hl.opt });
      | output
      span.hl.opt .
      span.hl.kwd writeln
      span.hl.opt ();
      span.hl.kwa return
      | output
      span.hl.opt .
      span.hl.kwd leave
      span.hl.opt ();
      span.hl.opt }
      span.hl.kwa else if
      span.hl.opt (
      | tagText
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | tagText
      span.hl.opt .
      | length
      span.hl.opt &amp;gt;
      span.hl.num 0
      span.hl.opt &amp;amp;&amp;amp;
      | tagText
      span.hl.opt .
      span.hl.kwd charAt
      span.hl.opt (
      span.hl.num 0
      span.hl.opt ) ===
      span.hl.str &apos;=&apos;
      span.hl.opt ) {
      | tagText
      span.hl.opt =
      span.hl.str &apos;
      span.hl.esc \\\\\\\\
      span.hl.str &apos;
      span.hl.opt +
      | tagText
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa return
      | output
      span.hl.opt .
      span.hl.kwd writeln
      span.hl.opt (
      | tagHead
      span.hl.opt +
      | tagAttr
      span.hl.opt +
      span.hl.str &apos; &apos;
      span.hl.opt +
      | tagText
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      | output
      span.hl.opt .
      span.hl.kwd writeln
      span.hl.opt (
      | tagHead
      span.hl.opt +
      | tagAttr
      span.hl.opt );
      span.hl.kwa return this
      span.hl.opt .
      span.hl.kwd children
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt );
      span.hl.opt }
      span.hl.opt };
      | Converter
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | children
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | parent
      span.hl.opt ,
      | output
      span.hl.opt ,
      | indent
      span.hl.opt ) {
      span.hl.kwa var
      | _this
      span.hl.opt =
      span.hl.kwa this
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | indent
      span.hl.opt =
      span.hl.kwa true
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ) {
      | output
      span.hl.opt .
      span.hl.kwd enter
      span.hl.opt ();
      span.hl.opt }
      span.hl.kwa this
      span.hl.opt .
      | writer
      span.hl.opt .
      span.hl.kwd forEachChild
      span.hl.opt (
      | parent
      span.hl.opt ,
      span.hl.kwa function
      span.hl.opt (
      | child
      span.hl.opt ) {
      span.hl.kwa var
      | nodeType
      span.hl.opt ;
      | nodeType
      span.hl.opt =
      | child
      span.hl.opt .
      | nodeType
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | nodeType
      span.hl.opt ===
      span.hl.num 1
      span.hl.opt ) {
      span.hl.kwa return
      | _this
      span.hl.opt .
      span.hl.kwd element
      span.hl.opt (
      | child
      span.hl.opt ,
      | output
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else if
      span.hl.opt (
      | nodeType
      span.hl.opt ===
      span.hl.num 3
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | parent
      span.hl.opt .
      | _nodeName
      span.hl.opt ===
      span.hl.str &apos;code&apos;
      span.hl.opt ) {
      span.hl.kwa return
      | _this
      span.hl.opt .
      span.hl.kwd text
      span.hl.opt (
      | child
      span.hl.opt ,
      | output
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt ,
      span.hl.kwa true
      span.hl.opt ,
      span.hl.kwa true
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      span.hl.kwa return
      | _this
      span.hl.opt .
      span.hl.kwd text
      span.hl.opt (
      | child
      span.hl.opt ,
      | output
      span.hl.opt );
      span.hl.opt }
      span.hl.opt }
      span.hl.kwa else if
      span.hl.opt (
      | nodeType
      span.hl.opt ===
      span.hl.num 8
      span.hl.opt ) {
      span.hl.kwa return
      | _this
      span.hl.opt .
      span.hl.kwd comment
      span.hl.opt (
      | child
      span.hl.opt ,
      | output
      span.hl.opt );
      span.hl.opt }
      span.hl.opt });
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ) {
      span.hl.kwa return
      | output
      span.hl.opt .
      span.hl.kwd leave
      span.hl.opt ();
      span.hl.opt }
      span.hl.opt };
      | Converter
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | text
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt ,
      | pipe
      span.hl.opt ,
      | trim
      span.hl.opt ,
      | wrap
      span.hl.opt ) {
      | node
      span.hl.opt .
      span.hl.kwd normalize
      span.hl.opt ();
      span.hl.kwa return this
      span.hl.opt .
      | writer
      span.hl.opt .
      span.hl.kwd writeText
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt ,
      | pipe
      span.hl.opt ,
      | trim
      span.hl.opt ,
      | wrap
      span.hl.opt );
      span.hl.opt };
      | Converter
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | comment
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt ) {
      span.hl.kwa var
      | condition
      span.hl.opt ,
      | data
      span.hl.opt ,
      | lines
      span.hl.opt ,
      | _this
      span.hl.opt =
      span.hl.kwa this
      span.hl.opt ;
      | condition
      span.hl.opt =
      | node
      span.hl.opt .
      | data
      span.hl.opt .
      span.hl.kwd match
      span.hl.opt (/
      | \\\\s
      span.hl.opt *
      | \\\\
      span.hl.opt [(
      span.hl.kwa if
      | \\\\s
      span.hl.opt +[
      | ^\\\\
      span.hl.opt ]]+)
      | \\\\
      span.hl.opt ]/);
      span.hl.kwa if
      span.hl.opt (!
      | condition
      span.hl.opt ) {
      | data
      span.hl.opt =
      | node
      span.hl.opt .
      | data ||
      span.hl.str &apos;&apos;
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | data
      span.hl.opt .
      | length
      span.hl.opt ===
      span.hl.num 0
      | || data
      span.hl.opt .
      span.hl.kwd search
      span.hl.opt (/
      span.hl.esc \\\\r
      | |
      span.hl.esc \\\\n
      span.hl.opt /) === -
      span.hl.num 1
      span.hl.opt ) {
      span.hl.kwa return
      | output
      span.hl.opt .
      span.hl.kwd writeln
      span.hl.opt (
      span.hl.str &amp;quot;// &amp;quot;
      span.hl.opt + (
      | data
      span.hl.opt .
      span.hl.kwd trim
      span.hl.opt ()));
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      | output
      span.hl.opt .
      span.hl.kwd writeln
      span.hl.opt (
      span.hl.str &apos;//&apos;
      span.hl.opt );
      | output
      span.hl.opt .
      span.hl.kwd enter
      span.hl.opt ();
      | lines
      span.hl.opt =
      | data
      span.hl.opt .
      span.hl.kwd split
      span.hl.opt (/
      span.hl.esc \\\\r
      | |
      span.hl.esc \\\\n
      span.hl.opt /);
      | lines
      span.hl.opt .
      span.hl.kwd forEach
      span.hl.opt (
      span.hl.kwa function
      span.hl.opt (
      | line
      span.hl.opt ) {
      span.hl.kwa return
      | _this
      span.hl.opt .
      | writer
      span.hl.opt .
      span.hl.kwd writeTextLine
      span.hl.opt (
      | line
      span.hl.opt ,
      | output
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt );
      span.hl.opt });
      span.hl.kwa return
      | output
      span.hl.opt .
      span.hl.kwd leave
      span.hl.opt ();
      span.hl.opt }
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      span.hl.kwa return this
      span.hl.opt .
      span.hl.kwd conditional
      span.hl.opt (
      | node
      span.hl.opt ,
      | condition
      span.hl.kwc [1]
      span.hl.opt ,
      | output
      span.hl.opt );
      span.hl.opt }
      span.hl.opt };
      | Converter
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | conditional
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | node
      span.hl.opt ,
      | condition
      span.hl.opt ,
      | output
      span.hl.opt ) {
      span.hl.kwa var
      | conditionalElem
      span.hl.opt ,
      | innerHTML
      span.hl.opt ;
      | innerHTML
      span.hl.opt =
      | node
      span.hl.opt .
      | textContent
      span.hl.opt .
      span.hl.kwd trim
      span.hl.opt ().
      span.hl.kwd replace
      span.hl.opt (/
      | \\\\s
      span.hl.opt *
      | \\\\
      span.hl.opt [
      span.hl.kwa if
      | \\\\s
      span.hl.opt +[
      | ^\\\\
      span.hl.opt ]]+
      | \\\\
      span.hl.opt ]&amp;gt;
      | \\\\s*/
      span.hl.opt ,
      span.hl.str &apos;&apos;
      span.hl.opt ).
      span.hl.kwd replace
      span.hl.opt (
      span.hl.str &apos;&amp;lt;![endif]&apos;
      span.hl.opt ,
      span.hl.str &apos;&apos;
      span.hl.opt );
      span.hl.kwa if
      span.hl.opt (
      | innerHTML
      span.hl.opt .
      span.hl.kwd indexOf
      span.hl.opt (
      span.hl.str &amp;quot;&amp;lt;!&amp;quot;
      span.hl.opt ) ===
      span.hl.num 0
      span.hl.opt ) {
      | condition
      span.hl.opt =
      span.hl.str &amp;quot; [&amp;quot;
      span.hl.opt +
      | condition
      span.hl.opt +
      span.hl.str &amp;quot;] &amp;lt;!&amp;quot;
      span.hl.opt ;
      | innerHTML
      span.hl.opt =
      span.hl.kwa null
      span.hl.opt ;
      span.hl.opt }
      | conditionalElem
      span.hl.opt =
      | node
      span.hl.opt .
      | ownerDocument
      span.hl.opt .
      span.hl.kwd createElement
      span.hl.opt (
      span.hl.str &apos;conditional&apos;
      span.hl.opt );
      | conditionalElem
      span.hl.opt .
      span.hl.kwd setAttribute
      span.hl.opt (
      span.hl.str &apos;condition&apos;
      span.hl.opt ,
      | condition
      span.hl.opt );
      span.hl.kwa if
      span.hl.opt (
      | innerHTML
      span.hl.opt ) {
      | conditionalElem
      span.hl.opt .
      | innerHTML
      span.hl.opt =
      | innerHTML
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa return
      | node
      span.hl.opt .
      | parentNode
      span.hl.opt .
      span.hl.kwd insertBefore
      span.hl.opt (
      | conditionalElem
      span.hl.opt ,
      | node
      span.hl.opt .
      | nextSibling
      span.hl.opt );
      span.hl.opt };
      | Converter
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | script
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt ,
      | tagHead
      span.hl.opt ,
      | tagAttr
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      span.hl.kwa this
      span.hl.opt .
      | scalate
      span.hl.opt ) {
      | output
      span.hl.opt .
      span.hl.kwd writeln
      span.hl.opt (
      span.hl.str &apos;:javascript&apos;
      span.hl.opt );
      span.hl.kwa return this
      span.hl.opt .
      | writer
      span.hl.opt .
      span.hl.kwd writeTextContent
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      | output
      span.hl.opt .
      span.hl.kwd writeln
      span.hl.opt (
      span.hl.str &amp;quot;&amp;quot;
      span.hl.opt +
      | tagHead
      span.hl.opt +
      | tagAttr
      span.hl.opt );
      span.hl.kwa return this
      span.hl.opt .
      | writer
      span.hl.opt .
      span.hl.kwd writeTextContent
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt ,
      span.hl.kwa true
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt ,
      span.hl.kwa true
      span.hl.opt );
      span.hl.opt }
      span.hl.opt };
      | Converter
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | style
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt ,
      | tagHead
      span.hl.opt ,
      | tagAttr
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      span.hl.kwa this
      span.hl.opt .
      | scalate
      span.hl.opt ) {
      | output
      span.hl.opt .
      span.hl.kwd writeln
      span.hl.opt (
      span.hl.str &apos;:css&apos;
      span.hl.opt );
      span.hl.kwa return this
      span.hl.opt .
      | writer
      span.hl.opt .
      span.hl.kwd writeTextContent
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      | output
      span.hl.opt .
      span.hl.kwd writeln
      span.hl.opt (
      span.hl.str &amp;quot;&amp;quot;
      span.hl.opt +
      | tagHead
      span.hl.opt +
      | tagAttr
      span.hl.opt );
      span.hl.kwa return this
      span.hl.opt .
      | writer
      span.hl.opt .
      span.hl.kwd writeTextContent
      span.hl.opt (
      | node
      span.hl.opt ,
      | output
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt ,
      span.hl.kwa true
      span.hl.opt ,
      span.hl.kwa false
      span.hl.opt );
      span.hl.opt }
      span.hl.opt };
      span.hl.kwa return
      | Converter
      span.hl.opt ;
      span.hl.opt })();
      | Output
      span.hl.opt = (
      span.hl.kwa function
      span.hl.opt () {
      span.hl.kwa function
      span.hl.kwd Output
      span.hl.opt () {
      span.hl.kwa this
      span.hl.opt .
      | indents
      span.hl.opt =
      span.hl.str &apos;&apos;
      span.hl.opt ;
      span.hl.opt }
      | Output
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | enter
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt () {
      span.hl.kwa return this
      span.hl.opt .
      | indents
      span.hl.opt +=
      span.hl.str &apos;  &apos;
      span.hl.opt ;
      span.hl.opt };
      | Output
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | leave
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt () {
      span.hl.kwa return this
      span.hl.opt .
      | indents
      span.hl.opt =
      span.hl.kwa this
      span.hl.opt .
      | indents
      span.hl.opt .
      span.hl.kwd substring
      span.hl.opt (
      span.hl.num 2
      span.hl.opt );
      span.hl.opt };
      | Output
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | write
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | data
      span.hl.opt ,
      | indent
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | indent
      span.hl.opt =
      span.hl.kwa true
      span.hl.opt ;
      span.hl.opt }
      span.hl.opt };
      | Output
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | writeln
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | data
      span.hl.opt ,
      | indent
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | indent
      span.hl.opt =
      span.hl.kwa true
      span.hl.opt ;
      span.hl.opt }
      span.hl.opt };
      span.hl.kwa return
      | Output
      span.hl.opt ;
      span.hl.opt })();
      | StringOutput
      span.hl.opt = (
      span.hl.kwa function
      span.hl.opt (
      | _super
      span.hl.opt ) {
      span.hl.kwd __extends
      span.hl.opt (
      | StringOutput
      span.hl.opt ,
      | _super
      span.hl.opt );
      span.hl.kwa function
      span.hl.kwd StringOutput
      span.hl.opt () {
      | StringOutput
      span.hl.opt .
      | __super__
      span.hl.opt .
      | constructor
      span.hl.opt .
      span.hl.kwd apply
      span.hl.opt (
      span.hl.kwa this
      span.hl.opt ,
      | arguments
      span.hl.opt );
      span.hl.kwa this
      span.hl.opt .
      | fragments
      span.hl.opt = [];
      span.hl.opt }
      | StringOutput
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | write
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | data
      span.hl.opt ,
      | indent
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | indent
      span.hl.opt =
      span.hl.kwa true
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | data
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | data
      span.hl.opt =
      span.hl.str &apos;&apos;
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ) {
      span.hl.kwa return this
      span.hl.opt .
      | fragments
      span.hl.opt .
      span.hl.kwd push
      span.hl.opt (
      span.hl.kwa this
      span.hl.opt .
      | indents
      span.hl.opt +
      | data
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      span.hl.kwa return this
      span.hl.opt .
      | fragments
      span.hl.opt .
      span.hl.kwd push
      span.hl.opt (
      | data
      span.hl.opt );
      span.hl.opt }
      span.hl.opt };
      | StringOutput
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | writeln
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | data
      span.hl.opt ,
      | indent
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | indent
      span.hl.opt =
      span.hl.kwa true
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | data
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | data
      span.hl.opt =
      span.hl.str &apos;&apos;
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ) {
      span.hl.kwa return this
      span.hl.opt .
      | fragments
      span.hl.opt .
      span.hl.kwd push
      span.hl.opt (
      span.hl.kwa this
      span.hl.opt .
      | indents
      span.hl.opt +
      | data
      span.hl.opt +
      span.hl.str &apos;
      span.hl.esc \\\\n
      span.hl.str &apos;
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      span.hl.kwa return this
      span.hl.opt .
      | fragments
      span.hl.opt .
      span.hl.kwd push
      span.hl.opt (
      | data
      span.hl.opt +
      span.hl.str &apos;
      span.hl.esc \\\\n
      span.hl.str &apos;
      span.hl.opt );
      span.hl.opt }
      span.hl.opt };
      | StringOutput
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | final
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt () {
      span.hl.kwa var
      | result
      span.hl.opt ;
      | result
      span.hl.opt =
      span.hl.kwa this
      span.hl.opt .
      | fragments
      span.hl.opt .
      span.hl.kwd join
      span.hl.opt (
      span.hl.str &apos;&apos;
      span.hl.opt );
      span.hl.kwa this
      span.hl.opt .
      | fragments
      span.hl.opt = [];
      span.hl.kwa return
      | result
      span.hl.opt ;
      span.hl.opt };
      span.hl.kwa return
      | StringOutput
      span.hl.opt ;
      span.hl.opt })(
      | Output
      span.hl.opt );
      | StreamOutput
      span.hl.opt = (
      span.hl.kwa function
      span.hl.opt (
      | _super
      span.hl.opt ) {
      span.hl.kwd __extends
      span.hl.opt (
      | StreamOutput
      span.hl.opt ,
      | _super
      span.hl.opt );
      span.hl.kwa function
      span.hl.kwd StreamOutput
      span.hl.opt (
      | stream
      span.hl.opt ) {
      span.hl.kwa this
      span.hl.opt .
      | stream
      span.hl.opt =
      | stream
      span.hl.opt ;
      | StreamOutput
      span.hl.opt .
      | __super__
      span.hl.opt .
      | constructor
      span.hl.opt .
      span.hl.kwd apply
      span.hl.opt (
      span.hl.kwa this
      span.hl.opt ,
      | arguments
      span.hl.opt );
      span.hl.opt }
      | StreamOutput
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | write
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | data
      span.hl.opt ,
      | indent
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | indent
      span.hl.opt =
      span.hl.kwa true
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | data
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | data
      span.hl.opt =
      span.hl.str &apos;&apos;
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ) {
      span.hl.kwa return this
      span.hl.opt .
      | stream
      span.hl.opt .
      span.hl.kwd write
      span.hl.opt (
      span.hl.kwa this
      span.hl.opt .
      | indents
      span.hl.opt +
      | data
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      span.hl.kwa return this
      span.hl.opt .
      | stream
      span.hl.opt .
      span.hl.kwd write
      span.hl.opt (
      | data
      span.hl.opt );
      span.hl.opt }
      span.hl.opt };
      | StreamOutput
      span.hl.opt .
      span.hl.kwa prototype
      span.hl.opt .
      | writeln
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | data
      span.hl.opt ,
      | indent
      span.hl.opt ) {
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | indent
      span.hl.opt =
      span.hl.kwa true
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | data
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | data
      span.hl.opt =
      span.hl.str &apos;&apos;
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt (
      | indent
      span.hl.opt ) {
      span.hl.kwa return this
      span.hl.opt .
      | stream
      span.hl.opt .
      span.hl.kwd write
      span.hl.opt (
      span.hl.kwa this
      span.hl.opt .
      | indents
      span.hl.opt +
      | data
      span.hl.opt +
      span.hl.str &apos;
      span.hl.esc \\\\n
      span.hl.str &apos;
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      span.hl.kwa return this
      span.hl.opt .
      | stream
      span.hl.opt .
      span.hl.kwd write
      span.hl.opt (
      | data
      span.hl.opt +
      span.hl.str &apos;
      span.hl.esc \\\\n
      span.hl.str &apos;
      span.hl.opt );
      span.hl.opt }
      span.hl.opt };
      span.hl.kwa return
      | StreamOutput
      span.hl.opt ;
      span.hl.opt })(
      | Output
      span.hl.opt );
      | scope
      span.hl.opt .
      | Output
      span.hl.opt =
      | Output
      span.hl.opt ;
      | scope
      span.hl.opt .
      | StringOutput
      span.hl.opt =
      | StringOutput
      span.hl.opt ;
      | scope
      span.hl.opt .
      | Converter
      span.hl.opt =
      | Converter
      span.hl.opt ;
      | scope
      span.hl.opt .
      | Writer
      span.hl.opt =
      | Writer
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      span.hl.kwa typeof
      | exports
      span.hl.opt !==
      span.hl.str &amp;quot;undefined&amp;quot;
      span.hl.opt &amp;amp;&amp;amp;
      | exports
      span.hl.opt !==
      span.hl.kwa null
      span.hl.opt ) {
      | scope
      span.hl.opt .
      | Parser
      span.hl.opt =
      | Parser
      span.hl.opt ;
      | scope
      span.hl.opt .
      | StreamOutput
      span.hl.opt =
      | StreamOutput
      span.hl.opt ;
      | scope
      span.hl.opt .
      | convert
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | input
      span.hl.opt ,
      | output
      span.hl.opt ,
      | options
      span.hl.opt ) {
      span.hl.kwa var
      | _ref1
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | options
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | options
      span.hl.opt = {};
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt ((
      | _ref1
      span.hl.opt =
      | options
      span.hl.opt .
      | parser
      span.hl.opt ) ==
      span.hl.kwa null
      span.hl.opt ) {
      | options
      span.hl.opt .
      | parser
      span.hl.opt =
      span.hl.kwa new
      span.hl.kwd Parser
      span.hl.opt (
      | options
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa return
      | options
      span.hl.opt .
      | parser
      span.hl.opt .
      span.hl.kwd parse
      span.hl.opt (
      | input
      span.hl.opt ,
      span.hl.kwa function
      span.hl.opt (
      | errors
      span.hl.opt ,
      | window
      span.hl.opt ) {
      span.hl.kwa var
      | _ref2
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | errors
      span.hl.opt !=
      span.hl.kwa null
      | ? errors
      span.hl.opt .
      | length
      span.hl.opt :
      span.hl.kwa void
      span.hl.num 0
      span.hl.opt ) {
      span.hl.kwa return
      | errors
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      span.hl.kwa if
      span.hl.opt (
      | output
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | output
      span.hl.opt =
      span.hl.kwa new
      span.hl.kwd StreamOutput
      span.hl.opt (
      | process
      span.hl.opt .
      | stdout
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt ((
      | _ref2
      span.hl.opt =
      | options
      span.hl.opt .
      | converter
      span.hl.opt ) ==
      span.hl.kwa null
      span.hl.opt ) {
      | options
      span.hl.opt .
      | converter
      span.hl.opt =
      span.hl.kwa new
      span.hl.kwd Converter
      span.hl.opt (
      | options
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa return
      | options
      span.hl.opt .
      | converter
      span.hl.opt .
      span.hl.kwd document
      span.hl.opt (
      | window
      span.hl.opt .
      | document
      span.hl.opt ,
      | output
      span.hl.opt );
      span.hl.opt }
      span.hl.opt });
      span.hl.opt };
      span.hl.opt }
      | scope
      span.hl.opt .
      | convertHtml
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | html
      span.hl.opt ,
      | options
      span.hl.opt ,
      | cb
      span.hl.opt ) {
      span.hl.kwa var
      | _ref1
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | options
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | options
      span.hl.opt = {};
      span.hl.opt }
      span.hl.kwa if
      span.hl.opt ((
      | _ref1
      span.hl.opt =
      | options
      span.hl.opt .
      | parser
      span.hl.opt ) ==
      span.hl.kwa null
      span.hl.opt ) {
      | options
      span.hl.opt .
      | parser
      span.hl.opt =
      span.hl.kwa new
      span.hl.kwd Parser
      span.hl.opt (
      | options
      span.hl.opt );
      span.hl.opt }
      span.hl.kwa return
      | options
      span.hl.opt .
      | parser
      span.hl.opt .
      span.hl.kwd parse
      span.hl.opt (
      | html
      span.hl.opt ,
      span.hl.kwa function
      span.hl.opt (
      | errors
      span.hl.opt ,
      | window
      span.hl.opt ) {
      span.hl.kwa var
      | output
      span.hl.opt ,
      | _ref2
      span.hl.opt ,
      | _ref3
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | errors
      span.hl.opt !=
      span.hl.kwa null
      | ? errors
      span.hl.opt .
      | length
      span.hl.opt :
      span.hl.kwa void
      span.hl.num 0
      span.hl.opt ) {
      span.hl.kwa return
      | errors
      span.hl.opt ;
      span.hl.opt }
      span.hl.kwa else
      span.hl.opt {
      | output
      span.hl.opt = (
      | _ref2
      span.hl.opt =
      | options
      span.hl.opt .
      | output
      span.hl.opt ) !=
      span.hl.kwa null
      | ? _ref2
      span.hl.opt :
      span.hl.kwa new
      span.hl.kwd StringOutput
      span.hl.opt ();
      span.hl.kwa if
      span.hl.opt ((
      | _ref3
      span.hl.opt =
      | options
      span.hl.opt .
      | converter
      span.hl.opt ) ==
      span.hl.kwa null
      span.hl.opt ) {
      | options
      span.hl.opt .
      | converter
      span.hl.opt =
      span.hl.kwa new
      span.hl.kwd Converter
      span.hl.opt (
      | options
      span.hl.opt );
      span.hl.opt }
      | options
      span.hl.opt .
      | converter
      span.hl.opt .
      span.hl.kwd document
      span.hl.opt (
      | window
      span.hl.opt .
      | document
      span.hl.opt ,
      | output
      span.hl.opt );
      span.hl.kwa if
      span.hl.opt (
      | cb
      span.hl.opt !=
      span.hl.kwa null
      span.hl.opt ) {
      span.hl.kwa return
      span.hl.kwd cb
      span.hl.opt (
      span.hl.kwa null
      span.hl.opt ,
      | output
      span.hl.opt .
      span.hl.kwd final
      span.hl.opt ());
      span.hl.opt }
      span.hl.opt }
      span.hl.opt });
      span.hl.opt };
      | scope
      span.hl.opt .
      | convertDocument
      span.hl.opt =
      span.hl.kwa function
      span.hl.opt (
      | document
      span.hl.opt ,
      | options
      span.hl.opt ,
      | cb
      span.hl.opt ) {
      span.hl.kwa var
      | output
      span.hl.opt ,
      | _ref1
      span.hl.opt ,
      | _ref2
      span.hl.opt ;
      span.hl.kwa if
      span.hl.opt (
      | options
      span.hl.opt ==
      span.hl.kwa null
      span.hl.opt ) {
      | options
      span.hl.opt = {};
      span.hl.opt }
      | output
      span.hl.opt = (
      | _ref1
      span.hl.opt =
      | options
      span.hl.opt .
      | output
      span.hl.opt ) !=
      span.hl.kwa null
      | ? _ref1
      span.hl.opt :
      span.hl.kwa new
      span.hl.kwd StringOutput
      span.hl.opt ();
      span.hl.kwa if
      span.hl.opt ((
      | _ref2
      span.hl.opt =
      | options
      span.hl.opt .
      | converter
      span.hl.opt ) ==
      span.hl.kwa null
      span.hl.opt ) {
      | options
      span.hl.opt .
      | converter
      span.hl.opt =
      span.hl.kwa new
      span.hl.kwd Converter
      span.hl.opt (
      | options
      span.hl.opt );
      span.hl.opt }
      | options
      span.hl.opt .
      | converter
      span.hl.opt .
      span.hl.kwd document
      span.hl.opt (
      | document
      span.hl.opt ,
      | output
      span.hl.opt );
      span.hl.kwa if
      span.hl.opt (
      | cb
      span.hl.opt !=
      span.hl.kwa null
      span.hl.opt ) {
      span.hl.kwa return
      span.hl.kwd cb
      span.hl.opt (
      span.hl.kwa null
      span.hl.opt ,
      | output
      span.hl.opt .
      span.hl.kwd final
      span.hl.opt ());
      span.hl.opt }
      span.hl.opt };
      span.hl.opt }).
      span.hl.kwd call
      span.hl.opt (
      span.hl.kwa this
      span.hl.opt );
// HTML generated by highlight 3.9, http://www.andre-simon.de/
"
`;

exports[`parser html: should convert pre2.html to match snapshot 1`] = `
"doctype html
html
  head
    meta(http-equiv=\\"content-type\\", content=\\"text/html; charset=ISO-8859-1\\")
    title html2jade.js
    link(rel=\\"stylesheet\\", type=\\"text/css\\", href=\\"highlight.css\\")
  body.hl
    pre.hl
      span.hl.slc // Generated by CoffeeScript 1.3.3
      span.hl.opt (
      span.hl.kwa function
      span.hl.opt () {
      span.hl.kwa var
      | Converter
      span.hl.opt ,
      | Output
      span.hl.opt ,
      | Parser
      span.hl.opt ,
      | StreamOutput
      span.hl.opt ,
      | StringOutput
      span.hl.opt ,
      | Writer
      span.hl.opt ,
      | publicIdDocTypeNames
      span.hl.opt ,
      | scope
      span.hl.opt ,
      | systemIdDocTypeNames
      span.hl.opt ,
      | _ref
      span.hl.opt ,
"
`;

exports[`parser html: should convert pre3.html to match snapshot 1`] = `
"doctype html
html
  head
    meta(http-equiv=\\"content-type\\", content=\\"text/html; charset=ISO-8859-1\\")
    title html2jade.js
    link(rel=\\"stylesheet\\", type=\\"text/css\\", href=\\"highlight.css\\")
  body.hl
    pre.hl
      span.hl.slc
        | // Generated by CoffeeScript 1.3.3
      span.hl.opt (
      span.hl.kwa function
      span.hl.opt () {
      span.hl.kwa var Converter
      span.hl.opt
        | ,
        | Output
      span.hl.opt ,
      | Parser
      span.hl.opt ,
      | StreamOutput
      span.hl.opt ,
      | StringOutput
      span.hl.opt ,
      | Writer
      span.hl.opt ,
      | publicIdDocTypeNames
      span.hl.opt ,
      | scope
      span.hl.opt ,
      | systemIdDocTypeNames
      span.hl.opt ,
      | _ref
      span.hl.opt ,
"
`;

exports[`parser html: should convert single-quotes.html to match snapshot 1`] = `
"html
  body
    nz-page-header.site-page-header((nzBack)='onBack()', nzBackIcon, nzTitle='Title', nzSubtitle='This is a subtitle')
"
`;

exports[`parser html: should convert single-quotes.json to match snapshot 1`] = `
"html
  body
    | {
    | &quot;doubleQuotes&quot;: false
    | }
"
`;

exports[`parser html: should convert test.html to match snapshot 1`] = `
"doctype html
html
  head
    meta(http-equiv=\\"content-type\\", content=\\"text/html; charset=ISO-8859-1\\")
    title html2jade.js
    link(rel=\\"stylesheet\\", type=\\"text/css\\", href=\\"highlight.css\\")
  body.hl
    pre.hl
      span.hl.slc // Generated by CoffeeScript 1.3.3
      span.hl.opt (
      span.hl.kwa function
      span.hl.opt () {
      span.hl.kwa var
      | Converter
      span.hl.opt ,
      | Output
      span.hl.opt ,
      | Parser
      span.hl.opt ,
      | StreamOutput
      span.hl.opt ,
      | StringOutput
      span.hl.opt ,
      | Writer
      span.hl.opt ,
      | publicIdDocTypeNames
      span.hl.opt ,
      | scope
      span.hl.opt ,
      | systemIdDocTypeNames
      span.hl.opt ,
      | _ref
      span.hl.opt ,
"
`;

exports[`parser html: should convert textarea-javascript.html to match snapshot 1`] = `
"html
  body
    textarea#text-area
      | javascript:window.s=document.createElement(&apos;script&apos;);window.sc=document.getElementsByTagName(&quot;body&quot;)[0]||document.getElementsByTagName(&quot;head&quot;)[0];s.src=&quot;http://xyz.com/path/app.js&quot;;sc.appendChild(s)
"
`;

exports[`parser html: should convert whitespace.html to match snapshot 1`] = `
"html
  body
    p Here is a 
      a(href=\\"#\\") link
      | with whitespaces around it
"
`;

exports[`parser html: should convert whitespace2.html to match snapshot 1`] = `
"html
  body
    p Hey there, 
      a(href=\\"#\\") html2jade
      strong is awesome
"
`;

exports[`parser html: should convert without-comma.html to match snapshot 1`] = `
"html
  body
    input(type=\\"text\\" value=\\"test\\")
"
`;

exports[`parser html: should convert without-comma.json to match snapshot 1`] = `
"html
  body
    | {
    | &quot;attrComma&quot;: false
    | }
"
`;

exports[`parser html: should convert without-html.html to match snapshot 1`] = `
"html
  head
    meta(charset=\\"UTF-8\\")
    title Title
  body
    div Lorem ipsum dolor sit amet.
"
`;

exports[`parser vue: should convert angular.html to match snapshot 1`] = `
"html
  body
    button.btn.btn-small(ng-click=\\"login('testing', 'testing')\\") Test Login
"
`;

exports[`parser vue: should convert angular-2.html to match snapshot 1`] = `
"html
  body
    nz-page-header.site-page-header((nzBack)=\\"onBack()\\", nzBackIcon, nzTitle=\\"Title\\", nzSubtitle=\\"This is a subtitle\\")
"
`;

exports[`parser vue: should convert apostrophe.html to match snapshot 1`] = `
"html
  body
    img(title=\\"Joe's Place\\")
    img(title='Joe\\"s Place')
"
`;

exports[`parser vue: should convert attr-multiline.html to match snapshot 1`] = `
"html
  body
    img(src=\\"img/close_button.png\\", height=\\"16\\", width=\\"16\\", alt=\\"Home\\", onclick=\`
    mwl.switchClass('#search_title', 'show_title_search', 'show_title_main');
    mwl.setGroupTarget('#navigateToggle', '#home', 'show', 'hide');
    mwl.switchClass('#slider', 'show_miniapp', 'show_main');
    mwl.scrollTo('#main');\`)
"
`;

exports[`parser vue: should convert attr-multiline2.html to match snapshot 1`] = `
"html
  body
    q-checkbox(v-if=\\"who == 3\\", label=\\"Framework agreement\\", :value=\\"terms.attributes.frameworkAgreement\\", @input=\`
      (val) => {
        $set(terms.attributes, 'frameworkAgreement', val)
      }
    \`, :disable=\\"readonly\\")
"
`;

exports[`parser vue: should convert bodyless.html to match snapshot 1`] = `
"div Lorem ipsum dolor sit amet.
  input(type=\\"text\\")
"
`;

exports[`parser vue: should convert bodyless.json to match snapshot 1`] = `
"| { &quot;bodyLess&quot;: true }
"
`;

exports[`parser vue: should convert bodyless2.html to match snapshot 1`] = `
"head
  meta(charset=\\"UTF-8\\")
  title Title
body
  div Lorem ipsum dolor sit amet.
"
`;

exports[`parser vue: should convert bodyless2.json to match snapshot 1`] = `
"| { &quot;bodyLess&quot;: true }
"
`;

exports[`parser vue: should convert classes-at-end.html to match snapshot 1`] = `
"html
  body
    div(v-if=\\"loading\\", @click=\\"doSomething()\\", :key=\\"index\\", v-for=\\"(x, index) in myArray\\").padding-left.padding-top.margin-right.text-center.text-white.background-black
"
`;

exports[`parser vue: should convert classes-at-end.json to match snapshot 1`] = `
"html
  body { &quot;classesAtEnd&quot;: true }
"
`;

exports[`parser vue: should convert code-inline.html to match snapshot 1`] = `
"html
  body
    code inline
"
`;

exports[`parser vue: should convert code-multiline.html to match snapshot 1`] = `
"html
  body
    code blah blah
"
`;

exports[`parser vue: should convert comment.html to match snapshot 1`] = `
"html
  head
  body
    //
      tr class=\\"a_b\\">
      <input name=\\"a_b\\" type=\\"checkbox\\" value=\\"true\\"><span id=\\"a_b\\">A B</span></input>
      </tr
"
`;

exports[`parser vue: should convert conditional.html to match snapshot 1`] = `
"html
  head
    meta(http-equiv=\\"X-UA-Compatible\\", content=\\"IE=Edge,chrome=1\\")
    meta(http-equiv=\\"content-type\\", content=\\"text/html; charset=us-ascii\\")
  body
    script.
      //<![CDATA[
      //]]>
    | Hello World. blah blah blah
"
`;

exports[`parser vue: should convert empty-class.html to match snapshot 1`] = `
"html
  head
  body(class=\\"\\")
    code blah blah
"
`;

exports[`parser vue: should convert entity.html to match snapshot 1`] = `
"html
  body
    p Note the lack of the
      code <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
      | , which disables the zooming aspect of sites in mobile devices. In addition, we reset our container's width and are basically good to go.
    p © Company 2013
"
`;

exports[`parser vue: should convert entity.json to match snapshot 1`] = `
"html
  body { \\"encode\\": false }
"
`;

exports[`parser vue: should convert headless.html to match snapshot 1`] = `
"html
  head
    script(type=\\"text/javascript\\").
      window.location = \\"/newsite/\\";
"
`;

exports[`parser vue: should convert keep-empty-quote.html to match snapshot 1`] = `
"html
  body
    div
      a(href=\\"\\") empty link
      input(type=\\"checkbox\\", checked)
      | checked box
"
`;

exports[`parser vue: should convert leading_equal.html to match snapshot 1`] = `
"html
  body
    div =1+1
"
`;

exports[`parser vue: should convert mustache.html to match snapshot 1`] = `
"html
  body
    #mustacheTestcases
      #div1(class=\\"panel-body {{listTypeClass}}\\") Test
      div(class=\\"note checklist-part indent-{{indent}}\\")
      textarea.note-text(id=\\"{{id}}\\") {{text}}
"
`;

exports[`parser vue: should convert only-body.html to match snapshot 1`] = `
"html
  body
    div Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur, facere?
"
`;

exports[`parser vue: should convert only-head.html to match snapshot 1`] = `
"html
  head
    script(type=\\"text/javascript\\").
      window.location = \\"/newsite/\\";
"
`;

exports[`parser vue: should convert parse-style.html to match snapshot 1`] = `
"html
  head
    style.
      .body {
      background: red;
      }
    style
"
`;

exports[`parser vue: should convert pfft.html to match snapshot 1`] = `
"html
  body
    p ffft
"
`;

exports[`parser vue: should convert single-quotes.html to match snapshot 1`] = `
"html
  body
    nz-page-header.site-page-header((nzBack)='onBack()', nzBackIcon, nzTitle='Title', nzSubtitle='This is a subtitle')
"
`;

exports[`parser vue: should convert single-quotes.json to match snapshot 1`] = `
"html
  body { &quot;doubleQuotes&quot;: false }
"
`;

exports[`parser vue: should convert textarea-javascript.html to match snapshot 1`] = `
"html
  body
    textarea#text-area javascript:window.s=document.createElement(&apos;script&apos;);window.sc=document.getElementsByTagName(&quot;body&quot;)[0]||document.getElementsByTagName(&quot;head&quot;)[0];s.src=&quot;http://xyz.com/path/app.js&quot;;sc.appendChild(s)
"
`;

exports[`parser vue: should convert vue.html to match snapshot 1`] = `
"html
  body
    QBtn(icon=\\"event\\", round, color=\\"primary\\")
      q-popup-proxy(@before-show=\\"updateProxy\\", cover, transition-show=\\"scale\\", transition-hide=\\"scale\\")
        q-date(v-model=\\"proxyDate\\")
          .row.items-center.justify-end.q-gutter-sm
            q-btn(label=\\"Cancel\\", color=\\"primary\\", flat, v-close-popup)
            q-btn(label=\\"OK\\", color=\\"primary\\", flat, @click=\\"save\\", v-close-popup)
    script.
      const a = document.querySelector('b');
    style.
      .hi {
      color: red;
      }
"
`;

exports[`parser vue: should convert whitespace.html to match snapshot 1`] = `
"html
  body
    p Here is a
      a(href=\\"#\\") link
      | with whitespaces around it
"
`;

exports[`parser vue: should convert whitespace2.html to match snapshot 1`] = `
"html
  body
    p Hey there,
      a(href=\\"#\\") html2jade

      strong is awesome
"
`;

exports[`parser vue: should convert without-comma.html to match snapshot 1`] = `
"html
  body
    input(type=\\"text\\" value=\\"test\\")
"
`;

exports[`parser vue: should convert without-comma.json to match snapshot 1`] = `
"html
  body { &quot;attrComma&quot;: false }
"
`;

exports[`parser vue: should convert without-html.html to match snapshot 1`] = `
"html
  head
    meta(charset=\\"UTF-8\\")
    title Title
  body
    div Lorem ipsum dolor sit amet.
"
`;
